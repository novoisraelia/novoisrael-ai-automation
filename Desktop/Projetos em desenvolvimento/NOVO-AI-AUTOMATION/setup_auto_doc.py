#!/usr/bin/env python3
"""
Script de configura√ß√£o do Sistema de Auto-Documenta√ß√£o
"""

import os
import sys
import subprocess
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Confirm

console = Console()

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        console.print("[red]‚ùå Python 3.8+ √© necess√°rio![/red]")
        console.print(f"Vers√£o atual: {sys.version}")
        return False
    return True

def install_dependencies():
    """Instala as depend√™ncias necess√°rias"""
    console.print("[blue]üì¶ Instalando depend√™ncias...[/blue]")
    
    try:
        subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ], check=True)
        console.print("[green]‚úÖ Depend√™ncias instaladas com sucesso![/green]")
        return True
    except subprocess.CalledProcessError as e:
        console.print(f"[red]‚ùå Erro ao instalar depend√™ncias: {e}[/red]")
        return False

def create_config_file():
    """Cria arquivo de configura√ß√£o"""
    config_content = """# Configura√ß√£o do Sistema de Auto-Documenta√ß√£o
PROJECT_ROOT = "."
DOCS_DIR = "docs"
WATCH_PATTERNS = [
    "*.js", "*.ts", "*.json", "*.md", "*.sql", "*.py"
]
IGNORE_PATTERNS = [
    "*.log", "*.tmp", "*.pyc", "__pycache__", 
    ".git", "node_modules", ".env", "tokens.json",
    "*.swp", "*.swo", ".DS_Store", "coverage"
]
AUTO_UPDATE = false
NOTIFY_CHANGES = true
"""
    
    config_path = Path("auto_doc_config.py")
    if not config_path.exists():
        with open(config_path, 'w', encoding='utf-8') as f:
            f.write(config_content)
        console.print("[green]‚úÖ Arquivo de configura√ß√£o criado![/green]")
    else:
        console.print("[yellow]‚ö†Ô∏è Arquivo de configura√ß√£o j√° existe.[/yellow]")

def create_startup_scripts():
    """Cria scripts de inicializa√ß√£o"""
    
    # Script Windows
    windows_script = """@echo off
echo Iniciando Sistema de Auto-Documentacao...
python auto_doc_system.py --watch
pause
"""
    
    with open("start_auto_doc.bat", 'w', encoding='utf-8') as f:
        f.write(windows_script)
    
    # Script Linux/Mac
    linux_script = """#!/bin/bash
echo "Iniciando Sistema de Auto-Documentacao..."
python3 auto_doc_system.py --watch
"""
    
    with open("start_auto_doc.sh", 'w', encoding='utf-8') as f:
        f.write(linux_script)
    
    # Tornar execut√°vel no Linux/Mac
    try:
        os.chmod("start_auto_doc.sh", 0o755)
    except:
        pass
    
    console.print("[green]‚úÖ Scripts de inicializa√ß√£o criados![/green]")

def create_git_hooks():
    """Cria hooks do Git para documenta√ß√£o autom√°tica"""
    hooks_dir = Path(".git/hooks")
    
    if not hooks_dir.exists():
        console.print("[yellow]‚ö†Ô∏è Diret√≥rio .git/hooks n√£o encontrado. Execute em um reposit√≥rio Git.[/yellow]")
        return
    
    # Pre-commit hook
    pre_commit_hook = """#!/bin/bash
echo "Executando an√°lise de documenta√ß√£o..."
python3 auto_doc_system.py --analyze-only
"""
    
    pre_commit_path = hooks_dir / "pre-commit"
    with open(pre_commit_path, 'w', encoding='utf-8') as f:
        f.write(pre_commit_hook)
    
    try:
        os.chmod(pre_commit_path, 0o755)
        console.print("[green]‚úÖ Git hook criado![/green]")
    except:
        console.print("[yellow]‚ö†Ô∏è N√£o foi poss√≠vel tornar o hook execut√°vel.[/yellow]")

def create_docs_structure():
    """Cria estrutura b√°sica de documenta√ß√£o se n√£o existir"""
    docs_dir = Path("docs")
    docs_dir.mkdir(exist_ok=True)
    
    # CHANGELOG.md se n√£o existir
    changelog_path = docs_dir / "CHANGELOG.md"
    if not changelog_path.exists():
        changelog_content = """# Changelog

Todas as mudan√ßas not√°veis neste projeto ser√£o documentadas neste arquivo.

O formato √© baseado em [Keep a Changelog](https://keepachangelog.com/pt-BR/1.0.0/),
e este projeto adere ao [Versionamento Sem√¢ntico](https://semver.org/lang/pt-BR/).

## [N√£o Lan√ßado]

### Adicionado
- Sistema de auto-documenta√ß√£o inteligente
- Monitoramento autom√°tico de mudan√ßas
- Atualiza√ß√£o autom√°tica de documenta√ß√£o

"""
        with open(changelog_path, 'w', encoding='utf-8') as f:
            f.write(changelog_content)
        console.print("[green]‚úÖ CHANGELOG.md criado![/green]")

def main():
    """Fun√ß√£o principal de configura√ß√£o"""
    console.print(Panel.fit(
        "[bold blue]üîß Configura√ß√£o do Sistema de Auto-Documenta√ß√£o[/bold blue]\n"
        "Este script ir√° configurar o sistema de monitoramento autom√°tico.",
        title="Setup Auto-Doc"
    ))
    
    # Verificar Python
    if not check_python_version():
        return
    
    # Instalar depend√™ncias
    if not install_dependencies():
        return
    
    # Criar arquivos de configura√ß√£o
    create_config_file()
    create_startup_scripts()
    create_git_hooks()
    create_docs_structure()
    
    console.print(Panel.fit(
        "[bold green]‚úÖ Configura√ß√£o conclu√≠da com sucesso![/bold green]\n\n"
        "[bold]Como usar:[/bold]\n"
        "‚Ä¢ [cyan]python auto_doc_system.py --watch[/cyan] - Monitoramento cont√≠nuo\n"
        "‚Ä¢ [cyan]python auto_doc_system.py[/cyan] - An√°lise √∫nica\n"
        "‚Ä¢ [cyan]./start_auto_doc.sh[/cyan] - Script de inicializa√ß√£o (Linux/Mac)\n"
        "‚Ä¢ [cyan]start_auto_doc.bat[/cyan] - Script de inicializa√ß√£o (Windows)\n\n"
        "[bold]Arquivos criados:[/bold]\n"
        "‚Ä¢ auto_doc_system.py - Sistema principal\n"
        "‚Ä¢ requirements.txt - Depend√™ncias Python\n"
        "‚Ä¢ auto_doc_config.py - Configura√ß√µes\n"
        "‚Ä¢ docs/CHANGELOG.md - Log de mudan√ßas\n"
        "‚Ä¢ Scripts de inicializa√ß√£o",
        title="Configura√ß√£o Completa"
    ))

if __name__ == '__main__':
    main()
