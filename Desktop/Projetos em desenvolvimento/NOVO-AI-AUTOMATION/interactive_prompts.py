#!/usr/bin/env python3
"""
Sistema de Prompts Interativos para Auto-Documenta√ß√£o
Interface amig√°vel para intera√ß√£o com o usu√°rio
"""

import os
import sys
from typing import List, Dict, Optional, Any
from dataclasses import dataclass
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt, Confirm, IntPrompt
from rich.syntax import Syntax
from rich.text import Text
from rich.layout import Layout
from rich.live import Live
from rich.align import Align
from rich import box

console = Console()

@dataclass
class ChangeSummary:
    """Resumo das mudan√ßas detectadas"""
    total_changes: int
    api_changes: int
    database_changes: int
    dependency_changes: int
    file_changes: int
    critical_changes: int

class InteractivePrompts:
    """Sistema de prompts interativos"""
    
    def __init__(self):
        self.console = Console()
        self.changes_history = []
    
    def show_welcome_screen(self):
        """Exibe tela de boas-vindas"""
        welcome_text = """
[bold blue]ü§ñ Sistema de Auto-Documenta√ß√£o Inteligente[/bold blue]

[bold]Funcionalidades:[/bold]
‚Ä¢ üîç Monitoramento autom√°tico de mudan√ßas
‚Ä¢ üìù Atualiza√ß√£o inteligente de documenta√ß√£o
‚Ä¢ üîå Detec√ß√£o de APIs e endpoints
‚Ä¢ üóÑÔ∏è Monitoramento de banco de dados
‚Ä¢ üì¶ Controle de depend√™ncias
‚Ä¢ üìä Relat√≥rios detalhados

[bold]Comandos dispon√≠veis:[/bold]
‚Ä¢ [cyan]s[/cyan] - Atualizar documenta√ß√£o
‚Ä¢ [cyan]n[/cyan] - N√£o atualizar
‚Ä¢ [cyan]m[/cyan] - Mostrar detalhes
‚Ä¢ [cyan]r[/cyan] - Revisar mudan√ßas
‚Ä¢ [cyan]q[/cyan] - Sair
        """
        
        console.print(Panel.fit(
            welcome_text,
            title="üöÄ Auto-Doc System",
            border_style="blue"
        ))
    
    def display_changes_summary(self, changes: List[Any]) -> ChangeSummary:
        """Exibe resumo das mudan√ßas"""
        summary = ChangeSummary(
            total_changes=len(changes),
            api_changes=len([c for c in changes if getattr(c, 'type', '') == 'api']),
            database_changes=len([c for c in changes if getattr(c, 'type', '') == 'database']),
            dependency_changes=len([c for c in changes if getattr(c, 'type', '') == 'dependency']),
            file_changes=len([c for c in changes if getattr(c, 'type', '') == 'file']),
            critical_changes=len([c for c in changes if getattr(c, 'type', '') in ['api', 'database']])
        )
        
        # Criar tabela de resumo
        table = Table(title="üìä Resumo das Mudan√ßas Detectadas", box=box.ROUNDED)
        table.add_column("Tipo", style="cyan", no_wrap=True)
        table.add_column("Quantidade", style="magenta", justify="center")
        table.add_column("Status", style="green")
        
        table.add_row("üîå APIs", str(summary.api_changes), "‚úÖ" if summary.api_changes > 0 else "‚ûñ")
        table.add_row("üóÑÔ∏è Banco de Dados", str(summary.database_changes), "‚úÖ" if summary.database_changes > 0 else "‚ûñ")
        table.add_row("üì¶ Depend√™ncias", str(summary.dependency_changes), "‚úÖ" if summary.dependency_changes > 0 else "‚ûñ")
        table.add_row("üìÅ Arquivos", str(summary.file_changes), "‚úÖ" if summary.file_changes > 0 else "‚ûñ")
        table.add_row("", "", "")
        table.add_row("üìà Total", str(summary.total_changes), "üîç")
        table.add_row("‚ö†Ô∏è Cr√≠ticas", str(summary.critical_changes), "üö®" if summary.critical_changes > 0 else "‚úÖ")
        
        console.print(table)
        
        # Exibir alertas se houver mudan√ßas cr√≠ticas
        if summary.critical_changes > 0:
            console.print(Panel.fit(
                f"[bold red]‚ö†Ô∏è {summary.critical_changes} mudan√ßas cr√≠ticas detectadas![/bold red]\n"
                "Recomendamos revisar antes de atualizar a documenta√ß√£o.",
                title="Alerta",
                border_style="red"
            ))
        
        return summary
    
    def ask_user_action(self, summary: ChangeSummary) -> str:
        """Pergunta ao usu√°rio qual a√ß√£o tomar"""
        
        # Personalizar pergunta baseada no tipo de mudan√ßas
        if summary.critical_changes > 0:
            question = f"[bold yellow]‚ö†Ô∏è {summary.critical_changes} mudan√ßas cr√≠ticas detectadas![/bold yellow]\nDeseja atualizar a documenta√ß√£o?"
        elif summary.total_changes > 10:
            question = f"[bold blue]üìä {summary.total_changes} mudan√ßas detectadas![/bold blue]\nDeseja atualizar a documenta√ß√£o?"
        else:
            question = f"[bold green]‚úÖ {summary.total_changes} mudan√ßas detectadas![/bold green]\nDeseja atualizar a documenta√ß√£o?"
        
        console.print(f"\n{question}")
        
        # Mostrar op√ß√µes
        options_table = Table(show_header=False, box=box.SIMPLE)
        options_table.add_column("Op√ß√£o", style="cyan", width=3)
        options_table.add_column("A√ß√£o", style="white")
        
        options_table.add_row("[bold]s[/bold]", "Sim - Atualizar documenta√ß√£o")
        options_table.add_row("[bold]n[/bold]", "N√£o - Pular atualiza√ß√£o")
        options_table.add_row("[bold]m[/bold]", "Mostrar detalhes das mudan√ßas")
        options_table.add_row("[bold]r[/bold]", "Revisar mudan√ßas espec√≠ficas")
        options_table.add_row("[bold]q[/bold]", "Sair do sistema")
        
        console.print(options_table)
        
        return Prompt.ask(
            "\n[bold]Escolha uma op√ß√£o[/bold]",
            choices=["s", "n", "m", "r", "q"],
            default="m"
        )
    
    def show_detailed_changes(self, changes: List[Any]):
        """Mostra detalhes das mudan√ßas"""
        console.print("\n[bold]üìã Detalhes das Mudan√ßas:[/bold]")
        
        # Agrupar por tipo
        changes_by_type = {}
        for change in changes:
            change_type = getattr(change, 'type', 'unknown')
            if change_type not in changes_by_type:
                changes_by_type[change_type] = []
            changes_by_type[change_type].append(change)
        
        # Mostrar por categoria
        for change_type, type_changes in changes_by_type.items():
            if change_type == 'api':
                self._show_api_changes(type_changes)
            elif change_type == 'database':
                self._show_database_changes(type_changes)
            elif change_type == 'dependency':
                self._show_dependency_changes(type_changes)
            else:
                self._show_file_changes(type_changes)
    
    def _show_api_changes(self, changes: List[Any]):
        """Mostra mudan√ßas em APIs"""
        if not changes:
            return
        
        console.print("\n[bold cyan]üîå Mudan√ßas em APIs:[/bold cyan]")
        
        table = Table(box=box.SIMPLE)
        table.add_column("M√©todo", style="green", width=8)
        table.add_column("Endpoint", style="blue")
        table.add_column("Arquivo", style="yellow")
        table.add_column("Linha", style="magenta", width=6)
        
        for change in changes:
            method = getattr(change, 'method', 'UNKNOWN')
            endpoint = getattr(change, 'endpoint', 'Unknown')
            file_path = getattr(change, 'file_path', 'Unknown')
            line_number = getattr(change, 'line_number', 0)
            
            table.add_row(method, endpoint, file_path, str(line_number))
        
        console.print(table)
    
    def _show_database_changes(self, changes: List[Any]):
        """Mostra mudan√ßas no banco de dados"""
        if not changes:
            return
        
        console.print("\n[bold cyan]üóÑÔ∏è Mudan√ßas no Banco de Dados:[/bold cyan]")
        
        table = Table(box=box.SIMPLE)
        table.add_column("Opera√ß√£o", style="red", width=10)
        table.add_column("Tabela", style="blue")
        table.add_column("Arquivo", style="yellow")
        table.add_column("Linha", style="magenta", width=6)
        
        for change in changes:
            operation = getattr(change, 'operation', 'UNKNOWN')
            table_name = getattr(change, 'table_name', 'Unknown')
            file_path = getattr(change, 'file_path', 'Unknown')
            line_number = getattr(change, 'line_number', 0)
            
            table.add_row(operation, table_name, file_path, str(line_number))
        
        console.print(table)
    
    def _show_dependency_changes(self, changes: List[Any]):
        """Mostra mudan√ßas em depend√™ncias"""
        if not changes:
            return
        
        console.print("\n[bold cyan]üì¶ Mudan√ßas em Depend√™ncias:[/bold cyan]")
        
        table = Table(box=box.SIMPLE)
        table.add_column("Pacote", style="blue")
        table.add_column("Vers√£o", style="green")
        table.add_column("Categoria", style="yellow", width=12)
        table.add_column("Arquivo", style="magenta")
        
        for change in changes:
            package = getattr(change, 'package_name', 'Unknown')
            version = getattr(change, 'version', 'Unknown')
            category = getattr(change, 'category', 'Unknown')
            file_path = getattr(change, 'file_path', 'Unknown')
            
            table.add_row(package, version, category, file_path)
        
        console.print(table)
    
    def _show_file_changes(self, changes: List[Any]):
        """Mostra mudan√ßas em arquivos"""
        if not changes:
            return
        
        console.print("\n[bold cyan]üìÅ Mudan√ßas em Arquivos:[/bold cyan]")
        
        for i, change in enumerate(changes, 1):
            description = getattr(change, 'description', 'Mudan√ßa detectada')
            file_path = getattr(change, 'file_path', 'Unknown')
            timestamp = getattr(change, 'timestamp', None)
            
            console.print(f"[bold]{i}.[/bold] {description}")
            console.print(f"    [dim]Arquivo:[/dim] {file_path}")
            if timestamp:
                console.print(f"    [dim]Hora:[/dim] {timestamp.strftime('%H:%M:%S')}")
            console.print()
    
    def review_specific_changes(self, changes: List[Any]) -> List[Any]:
        """Permite revisar mudan√ßas espec√≠ficas"""
        console.print("\n[bold]üîç Revis√£o de Mudan√ßas Espec√≠ficas:[/bold]")
        
        selected_changes = []
        
        for i, change in enumerate(changes, 1):
            description = getattr(change, 'description', 'Mudan√ßa detectada')
            change_type = getattr(change, 'type', 'unknown')
            
            console.print(f"\n[bold]{i}.[/bold] [{change_type.upper()}] {description}")
            
            # Mostrar detalhes espec√≠ficos
            if hasattr(change, 'details') and change.details:
                console.print("    [dim]Detalhes:[/dim]")
                for key, value in change.details.items():
                    console.print(f"      - {key}: {value}")
            
            # Perguntar se deve incluir
            include = Confirm.ask("    Incluir esta mudan√ßa?", default=True)
            if include:
                selected_changes.append(change)
        
        console.print(f"\n[bold green]‚úÖ {len(selected_changes)} mudan√ßas selecionadas para atualiza√ß√£o.[/bold green]")
        return selected_changes
    
    def show_update_progress(self, current: int, total: int, operation: str):
        """Mostra progresso da atualiza√ß√£o"""
        percentage = (current / total) * 100 if total > 0 else 0
        
        progress_text = f"[bold]{operation}[/bold]\n"
        progress_text += f"Progresso: {current}/{total} ({percentage:.1f}%)"
        
        console.print(Panel.fit(
            progress_text,
            title="üìù Atualizando Documenta√ß√£o",
            border_style="green"
        ))
    
    def show_update_complete(self, changes_count: int, files_updated: List[str]):
        """Mostra conclus√£o da atualiza√ß√£o"""
        success_text = f"[bold green]‚úÖ Documenta√ß√£o atualizada com sucesso![/bold green]\n\n"
        success_text += f"[bold]Resumo:[/bold]\n"
        success_text += f"‚Ä¢ {changes_count} mudan√ßas processadas\n"
        success_text += f"‚Ä¢ {len(files_updated)} arquivos atualizados\n\n"
        
        if files_updated:
            success_text += f"[bold]Arquivos atualizados:[/bold]\n"
            for file in files_updated:
                success_text += f"‚Ä¢ {file}\n"
        
        console.print(Panel.fit(
            success_text,
            title="üéâ Atualiza√ß√£o Conclu√≠da",
            border_style="green"
        ))
    
    def ask_confirmation(self, message: str, default: bool = True) -> bool:
        """Pergunta de confirma√ß√£o simples"""
        return Confirm.ask(message, default=default)
    
    def show_error(self, error_message: str):
        """Mostra mensagem de erro"""
        console.print(Panel.fit(
            f"[bold red]‚ùå Erro:[/bold red] {error_message}",
            title="Erro",
            border_style="red"
        ))
    
    def show_info(self, info_message: str):
        """Mostra mensagem informativa"""
        console.print(Panel.fit(
            f"[bold blue]‚ÑπÔ∏è {info_message}[/bold blue]",
            title="Informa√ß√£o",
            border_style="blue"
        ))
    
    def show_success(self, success_message: str):
        """Mostra mensagem de sucesso"""
        console.print(Panel.fit(
            f"[bold green]‚úÖ {success_message}[/bold green]",
            title="Sucesso",
            border_style="green"
        ))
    
    def create_live_dashboard(self, changes: List[Any]):
        """Cria dashboard em tempo real"""
        layout = Layout()
        
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="main"),
            Layout(name="footer", size=3)
        )
        
        layout["main"].split_row(
            Layout(name="left"),
            Layout(name="right")
        )
        
        # Header
        layout["header"].update(
            Panel.fit(
                "[bold blue]ü§ñ Sistema de Auto-Documenta√ß√£o - Dashboard[/bold blue]",
                border_style="blue"
            )
        )
        
        # Left panel - Changes summary
        changes_text = f"[bold]Mudan√ßas Detectadas:[/bold] {len(changes)}\n"
        changes_text += f"‚Ä¢ APIs: {len([c for c in changes if getattr(c, 'type', '') == 'api'])}\n"
        changes_text += f"‚Ä¢ Banco: {len([c for c in changes if getattr(c, 'type', '') == 'database'])}\n"
        changes_text += f"‚Ä¢ Depend√™ncias: {len([c for c in changes if getattr(c, 'type', '') == 'dependency'])}\n"
        changes_text += f"‚Ä¢ Arquivos: {len([c for c in changes if getattr(c, 'type', '') == 'file'])}"
        
        layout["left"].update(
            Panel.fit(
                changes_text,
                title="üìä Resumo",
                border_style="green"
            )
        )
        
        # Right panel - Recent changes
        recent_changes = changes[-5:] if len(changes) > 5 else changes
        recent_text = ""
        for change in recent_changes:
            description = getattr(change, 'description', 'Mudan√ßa detectada')
            change_type = getattr(change, 'type', 'unknown')
            recent_text += f"‚Ä¢ [{change_type}] {description}\n"
        
        layout["right"].update(
            Panel.fit(
                recent_text or "Nenhuma mudan√ßa recente",
                title="üïí Recentes",
                border_style="yellow"
            )
        )
        
        # Footer
        layout["footer"].update(
            Panel.fit(
                "[bold]Comandos:[/bold] s=atualizar | n=pular | m=detalhes | r=revisar | q=sair",
                border_style="blue"
            )
        )
        
        return layout
